
use std::fs::File;
use std::io::{self, *, BufReader};
use std::path::Path;
use std::str::FromStr;
use std::fmt::Debug;


fn read_lines<T> (filename: T) 
    -> io::Result<io::Lines<io::BufReader<File>>>
    where T: AsRef<Path>, {
    let file = File::open(filename)?;
    let reader = BufReader::new(file);
    Ok(reader.lines())
}

pub fn read_data<T> (filename:&str) -> Vec<T> 
    where T: FromStr,
    <T as FromStr>::Err: Debug, {
    let mut rv: Vec<T> = vec![];
    if let Ok(lines) = read_lines(filename) {
        for line in lines.flatten() {
            rv.push(line.parse().unwrap());
        }
    }
    rv
}



use std::time::{SystemTime};

pub struct Timer {
    timer: SystemTime
}

impl Timer {
    pub fn new() -> Timer {
        Timer {
            timer: SystemTime::now()
        }
    }
}

impl Drop for Timer {
    fn drop(&mut self) {
        let elsp = 0.001 * (
            self.timer
            .elapsed()
            .unwrap()
            .as_millis() as f32
        );
        println!("Used: {} seconds", elsp);
    }
}
